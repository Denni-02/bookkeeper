/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 06 17:10:21 GMT 2025
 */

package org.apache.bookkeeper.bookie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.CompositeByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import io.netty.buffer.UnpooledUnsafeHeapByteBuf;
import java.io.IOException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import org.apache.bookkeeper.bookie.BufferedChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = false, resetStaticState = true, separateClassLoader = true) 
public class BufferedChannel_ESTest extends BufferedChannel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q", false);
      mockFileOutputStream0.write((-531492226));
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.directBuffer();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 256, 256);
      // Undeclared exception!
      try { 
        bufferedChannel0.read(byteBuf0, (long) 256, 256);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minWritableBytes : -255 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@ xY", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 0);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.directBuffer();
      bufferedChannel0.read(byteBuf0, (long) 0, 0);
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.directBuffer(1322);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ML2!Z!rBqO@LJuO", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 0, (-47L));
      // Undeclared exception!
      try { 
        bufferedChannel0.read(byteBuf0, 1788L, 1682554634);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dest buffer remaining capacity is not enough(must be at least as \"length\"=1682554634)
         //
         verifyException("org.apache.bookkeeper.bookie.BufferedChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ML2!Z!(Bq*@LJuO", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 0, (-47L));
      bufferedChannel0.position = (long) 4264;
      long long0 = bufferedChannel0.forceWrite(false);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ML2!Z!(Bq*@LJuO", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 569, 569);
      bufferedChannel0.flushAndForceWriteIfRegularFlush(true);
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ML2!Z!(Bq*@LJuO", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 0, (-47L));
      bufferedChannel0.flushAndForceWrite(true);
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.directBuffer(1322);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ML2!Z!rBqO@LJuO", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(1093L);
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel1, 0);
      bufferedChannel0.write(byteBuf0);
      assertEquals(1093L, bufferedChannel0.position());
      assertEquals(1093L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Read past EOF", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 569, 1L);
      compositeByteBuf0.writeLong(16384L);
      bufferedChannel0.write(compositeByteBuf0);
      long long0 = bufferedChannel0.position();
      assertEquals(8L, bufferedChannel0.getFileChannelPosition());
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("unFilable", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      byte[] byteArray0 = new byte[4];
      mockFileOutputStream0.write(byteArray0);
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 1);
      long long0 = bufferedChannel0.getFileChannelPosition();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ML2!Z!(Bq*@LJuO", true);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("ML2!Z!(Bq*@LJuO");
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      FileChannel fileChannel1 = fileChannel0.position(411L);
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel1, 569, 1L);
      long long0 = bufferedChannel0.forceWrite(true);
      assertEquals(411L, long0);
      assertEquals(411L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("unFilable", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 1);
      bufferedChannel0.close();
      UnpooledUnsafeHeapByteBuf unpooledUnsafeHeapByteBuf0 = new UnpooledUnsafeHeapByteBuf(unpooledByteBufAllocator0, 1, 5683);
      ByteBuf byteBuf0 = unpooledUnsafeHeapByteBuf0.writeMedium(1);
      // Undeclared exception!
      try { 
        bufferedChannel0.write(byteBuf0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("unFilable", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 0, 256, 0);
      UnpooledUnsafeHeapByteBuf unpooledUnsafeHeapByteBuf0 = new UnpooledUnsafeHeapByteBuf(unpooledByteBufAllocator0, 256, 1736);
      ByteBuf byteBuf0 = unpooledUnsafeHeapByteBuf0.writeShort(1736);
      // Undeclared exception!
      bufferedChannel0.write(byteBuf0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("unFilable", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 5232, 4095L);
      // Undeclared exception!
      try { 
        bufferedChannel0.write((ByteBuf) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.BufferedChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("unFilable", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 8, 8);
      // Undeclared exception!
      try { 
        bufferedChannel0.read((ByteBuf) null, 1L, (-811));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.BufferedChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Read past EOF");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 8, 569);
      bufferedChannel0.close();
      try { 
        bufferedChannel0.forceWrite(false);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(ClosedChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Reading from filechannel returned a non-positive value. Short read.", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 836);
      bufferedChannel0.close();
      // Undeclared exception!
      try { 
        bufferedChannel0.flush();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // refCnt: 0
         //
         verifyException("io.netty.buffer.AbstractByteBuf", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q", false);
      MockFile mockFile0 = new MockFile("Q");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 2367, 2367);
      // Undeclared exception!
      try { 
        bufferedChannel0.flush();
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Rad pastEOF");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      fileChannel0.close();
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 41, 1L);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, (FileChannel) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.BufferedChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("runFillable", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, (-971), 256L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity : -971 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.bookkeeper.bookie.BufferedChannel", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 1305, 1305);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ML2!Z!rBqO@LJuO", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 0, (-47L));
      bufferedChannel0.close();
      BufferedChannel bufferedChannel1 = null;
      try {
        bufferedChannel1 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 137, 1322, 1322);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, (FileChannel) null, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.BufferedChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, (-3486), (-3486), (-3486));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity : -3486 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@ xY", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 0);
      bufferedChannel0.close();
      BufferedChannel bufferedChannel1 = null;
      try {
        bufferedChannel1 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 0);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, false, false);
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, (FileChannel) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.BufferedChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!->", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, (-3499));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity : -3499 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.bookkeeper.bookie.BufferedChannel", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("unFilable", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 256);
      bufferedChannel0.flush();
      assertEquals(0L, bufferedChannel0.position());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7epectedValuesPerKey", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      ByteBuf byteBuf0 = unpooledByteBufAllocator0.directBuffer();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 256, 3096L);
      // Undeclared exception!
      try { 
        bufferedChannel0.read(byteBuf0, (-668L), 256);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative position: -668
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ML2!Z!(Bq*@LJuO", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 569, 569);
      int int0 = bufferedChannel0.read((ByteBuf) compositeByteBuf0, (long) 1682554634, (-4219));
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ML2!Z!(Bq*@LJuO", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 428);
      long long0 = bufferedChannel0.forceWrite(true);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("unFilable", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 256);
      bufferedChannel0.flushAndForceWriteIfRegularFlush(true);
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Read past EOF", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 1, 1L);
      CompositeByteBuf compositeByteBuf1 = compositeByteBuf0.writeLong(1001L);
      bufferedChannel0.write(compositeByteBuf1);
      assertEquals(8L, bufferedChannel0.position());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ML2!Z!(Bq*@LJuO", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      CompositeByteBuf compositeByteBuf0 = unpooledByteBufAllocator0.compositeHeapBuffer();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 569, 569);
      bufferedChannel0.write(compositeByteBuf0);
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
      assertEquals(0L, bufferedChannel0.position());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ML2!Z!(Bq*@LJuO", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      PooledByteBufAllocator pooledByteBufAllocator0 = new PooledByteBufAllocator(false);
      BufferedChannel bufferedChannel0 = new BufferedChannel(pooledByteBufAllocator0, fileChannel0, 0, 0);
      bufferedChannel0.close();
      bufferedChannel0.close();
      assertFalse(fileChannel0.isOpen());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("unFilable", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 256);
      long long0 = bufferedChannel0.getFileChannelPosition();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ML2!Z!(Bq*@LJuO", true);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 569, 569);
      long long0 = bufferedChannel0.getUnpersistedBytes();
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ML2!Z!(Bq*@LJuO", true);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("ML2!Z!(Bq*@LJuO");
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 569, 1L);
      bufferedChannel0.getNumOfBytesInWriteBuffer();
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@ xY", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 2367, 2367);
      bufferedChannel0.clear();
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@ xY", false);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false);
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 0);
      long long0 = bufferedChannel0.position();
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
      assertEquals(0L, long0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 06 17:59:06 GMT 2025
 */

package org.apache.bookkeeper.bookie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.buffer.UnpooledByteBufAllocator;
import java.io.IOException;
import java.nio.channels.ClosedChannelException;
import java.nio.channels.FileChannel;
import java.nio.channels.NonWritableChannelException;
import org.apache.bookkeeper.bookie.BufferedChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BufferedChannel_ESTest extends BufferedChannel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Reading from filechannel returned a non-positive value. Short read.");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(pooledByteBufAllocator0, fileChannel0, (byte)1, (byte)1);
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      assertEquals(0, pooledByteBufAllocator0.numThreadLocalCaches());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Reading from filechannel returned a non-positive value. Short read.");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(pooledByteBufAllocator0, fileChannel0, 1);
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Reading fromfilechannel returned a non-positive value. Short read.");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, true);
      mockFileOutputStream0.write(3480);
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 126, 126);
      assertEquals(1L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+Z%di!<H|.(6G3VpjUv");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      fileChannel0.close();
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 126, 126);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(false, true);
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, (FileChannel) null, 2164, 2164);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.BufferedChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("[9J8q");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[9J8q");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 1506, 1506);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, (FileChannel) null, 126, 126, 126);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.BufferedChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Reading fromfilechannel returned a non-positive value. Short read.");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, (-530), 126, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialCapacity : -530 (expected: >= 0)
         //
         verifyException("io.netty.util.internal.ObjectUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Reading from filechannel returned a non-positive value. Short read.");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(pooledByteBufAllocator0, fileChannel0, 104, 104, 104);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[9J8q");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 411, 1506, 1173L);
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Reading from filechannel returned a non-positive value. Short read.");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      mockFileOutputStream0.close();
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(pooledByteBufAllocator0, fileChannel0, 2125);
        fail("Expecting exception: ClosedChannelException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("+@Z='BJ)");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel((ByteBufAllocator) null, fileChannel0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bookkeeper.bookie.BufferedChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PooledByteBufAllocator pooledByteBufAllocator0 = PooledByteBufAllocator.DEFAULT;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Ma_A{ee5j#h<;@6!7f");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      BufferedChannel bufferedChannel0 = null;
      try {
        bufferedChannel0 = new BufferedChannel(pooledByteBufAllocator0, fileChannel0, 2108);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[98q/%");
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = new UnpooledByteBufAllocator(true, false, false);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("[98q/%");
      FileChannel fileChannel0 = mockFileInputStream0.getChannel();
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 3842);
      // Undeclared exception!
      try { 
        bufferedChannel0.flushAndForceWrite(true);
        fail("Expecting exception: NonWritableChannelException");
      
      } catch(NonWritableChannelException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.EvoFileChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[9J8q");
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      UnpooledByteBufAllocator unpooledByteBufAllocator0 = UnpooledByteBufAllocator.DEFAULT;
      BufferedChannel bufferedChannel0 = new BufferedChannel(unpooledByteBufAllocator0, fileChannel0, 0, 0, 0);
      long long0 = bufferedChannel0.position();
      assertEquals(0L, long0);
      assertEquals(0L, bufferedChannel0.getFileChannelPosition());
  }
}
